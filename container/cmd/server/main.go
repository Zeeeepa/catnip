package main

import (
	"log"
	"os"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/swagger"
	"github.com/vanpelt/catnip/internal/handlers"
	"github.com/vanpelt/catnip/internal/models"
	// _ "github.com/vanpelt/catnip/docs" // This will be generated by swag
)

// @title Catnip Container API
// @version 1.0
// @description API for managing container PTY sessions and services
// @host localhost:8080
// @BasePath /v1
// @schemes http ws
func main() {
	// Start Claude settings persistence manager
	claudeSettings := models.NewClaudeSettings()
	claudeSettings.Start()
	defer claudeSettings.Stop()

	app := fiber.New(fiber.Config{
		DisableStartupMessage: false,
		AppName:               "Catnip Container v1.0.0",
	})

	// Middleware
	app.Use(logger.New())
	app.Use(recover.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "Origin, Content-Type, Accept",
	}))

	// Health check
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{"status": "ok"})
	})

	// Swagger documentation
	app.Get("/swagger/*", swagger.HandlerDefault)

	// API v1 routes
	v1 := app.Group("/v1")
	
	// Initialize handlers
	ptyHandler := handlers.NewPTYHandler()
	
	// Register routes
	v1.Get("/pty", ptyHandler.HandleWebSocket)
	
	// Handle static files and SPA routing
	if handlers.IsDevMode() {
		// In development mode, proxy to Vite dev server
		log.Println("ðŸ”§ Development mode: proxying to Vite dev server")
		app.Use(func(c *fiber.Ctx) error {
			// Skip API routes and health/swagger
			path := c.Path()
			if path == "/health" || 
			   strings.HasPrefix(path, "/swagger") || 
			   strings.HasPrefix(path, "/v1/") {
				return c.Next()
			}
			// Proxy everything else to Vite
			return handlers.ProxyToVite(c)
		})
	} else {
		// Production mode: serve static files
		staticPath := os.Getenv("STATIC_PATH")
		if staticPath == "" {
			staticPath = "./dist"
		}
		
		app.Static("/", staticPath)
		
		// Fallback to index.html for SPA routing
		app.Get("/*", func(c *fiber.Ctx) error {
			return c.SendFile(staticPath + "/index.html")
		})
	}

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("ðŸš€ Catnip server starting on port %s", port)
	log.Fatal(app.Listen(":" + port))
}